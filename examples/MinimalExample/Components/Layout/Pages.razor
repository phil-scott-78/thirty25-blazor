@page "/{*fileName:nonfile}"

@using System.Diagnostics.CodeAnalysis
@using MyLittleContentEngine.Models
@using MyLittleContentEngine.Services.Content
@using MyLittleContentEngine
@inject ContentEngineOptions ContentEngineOptions
@inject MarkdownContentService<BlogFrontMatter> MarkdownContentService

@if (IsLoaded)
{
    <PageTitle>@ContentEngineOptions.SiteTitle - @_post.FrontMatter.Title</PageTitle>
        <article>
        <header>
            <h1 class="text-4xl font-bold"> @_post.FrontMatter.Title</h1>
        </header>
        
        <div class="prose max-w-full">
            @((MarkupString)_postContent)
        </div>
    </article>
}
else
{
    <PageTitle>@ContentEngineOptions.SiteTitle</PageTitle>
    <p>Not found</p>
}

@code {
    private MarkdownContentPage<BlogFrontMatter>? _post;
    private string? _postContent;

    [MemberNotNull(nameof(_postContent))]
    [MemberNotNull(nameof(_post))]
    bool IsLoaded { get; set; }

    [Parameter] public required string FileName { get; init; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var fileName = FileName;
        if (string.IsNullOrWhiteSpace(fileName))
        {
            fileName = "index";
        }

        var page = await MarkdownContentService.GetRenderedContentPageByUrlOrDefault(fileName);
        if (page == null)
        {
            return;
        }

        _post = page.Value.Page;
        _postContent = page.Value.HtmlContent;
        IsLoaded = true;
    }
}