@page "/{*fileName:nonfile}"
@page "/"

@using System.Diagnostics.CodeAnalysis
@using MyLittleContentEngine.Models
@using MyLittleContentEngine.Services.Content
@using Microsoft.AspNetCore.Components.Sections
@inject ContentEngineOptions ContentEngineOptions
@inject MarkdownContentService<DocsFrontMatter> MarkdownContentService

@if (IsLoaded)
{
    
    <PageTitle>@ContentEngineOptions.SiteTitle - @_post.FrontMatter.Title</PageTitle>
    <article>
    <header>
        <h1 class="font-display text-2xl lg:text-4xl font-bold tracking-tight text-base-900 dark:text-base-50"> @_post.FrontMatter.Title</h1>
    </header>
    
    <div class="prose dark:prose-invert max-w-none prose-headings:scroll-m-28 prose-headings:font-display prose-headings:text-base-900 dark:prose-headings:text-base-50">
        @((MarkupString)_postContent)
    </div>
    </article>
}
else
{
    <PageTitle>@ContentEngineOptions.SiteTitle</PageTitle>
    <p>Not found</p>
}

<SectionContent SectionName="sidebar">
    @if (IsLoaded)
    {
        <OutlineNavigation Outline="@_outline" BaseUrl="@_post.NavigateUrl" />
    }
</SectionContent>

@code {
    private MarkdownContentPage<DocsFrontMatter>? _post;
    private string? _postContent;
    private OutlineEntry[]? _outline;

    [MemberNotNull(nameof(_postContent))]
    [MemberNotNull(nameof(_outline))]
    [MemberNotNull(nameof(_post))]
    bool IsLoaded { get; set; }



    [Parameter] public required string FileName { get; init; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var fileName = FileName;
        if (string.IsNullOrWhiteSpace(fileName))
        {
            fileName = "index";
        }

        var page = await MarkdownContentService.GetRenderedContentPageByUrlOrDefault(fileName);
        if (page == null)
        {
            return;
        }

        _outline = page.Value.Page.Outline;
        _post = page.Value.Page;
        _postContent = page.Value.HtmlContent;
        IsLoaded = true;
    }
}