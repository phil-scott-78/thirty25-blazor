@using BlazorStatic
@inject BlazorStaticOptions Options

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    
    <base href="@_baseHref"/>
    
    @* ReSharper disable once Html.PathError - this is generated dynamically via MapGet *@
    <link type="application/rss+xml" rel="alternate" title="Thirty25" href="rss.xml" />
    <link rel="stylesheet" href="styles.css?v=@DateTime.Now.Ticks">

    <meta name="description" content="@Options.BlogDescription">

    <script>
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    </script>
    <HeadOutlet/>
    <PageTitle>@Options.BlogTitle</PageTitle>
</head>

<body class="antialiased font-sans bg-primary-50 dark:bg-neutral-900 transition-colors ">
<div class="dark:bg-primary-950/50 min-h-screen pb-4 md:pb-16">
    <Routes/>
</div>
</body>
<script>
    function swapTheme(){
        if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.theme = 'light';
        } else {
            document.documentElement.classList.add('dark');
            localStorage.theme = 'dark';
        }
    }
</script>
<!-- Import the ESM versions of the required libraries -->
<script type="module">
    const prefix = 'language-';
    const codeNodes = Array.from(document.body.querySelectorAll('code'));
    const relevantNodes = codeNodes.filter(node =>
        Array.from(node.classList).some(cls => cls.startsWith(prefix))
    );

    if (relevantNodes.length > 0) {
        // Collect unique languages used
        const languages = new Set();
        for (const node of relevantNodes) {
            const langClass = Array.from(node.classList).find(cls => cls.startsWith(prefix));
            if (langClass) {
                languages.add(langClass.slice(prefix.length));
            }
        }

        // Dynamically import starry-night and any needed languages
        const [{common, createStarryNight}, {toDom}] = await Promise.all([
            import('https://esm.sh/@@wooorm/starry-night@3?bundle'),
            import('https://esm.sh/hast-util-to-dom@4?bundle')
        ]);

        // Build list of grammar imports
        const langImports = [];
        for (const lang of languages) {
            // Only load extra languages that are NOT part of `common`
            if (!common.some(gram => gram.names.includes(lang))) {

                try {
                    const mod = await import(`https://esm.sh/@@wooorm/starry-night@3/lang/source.${lang}?bundle`);
                    langImports.push(mod.default);
                } catch (err) {
                    console.warn(`Could not load language grammar for: ${lang}`, err);
                }
            }
        }

        const starryNight = await createStarryNight([...common, ...langImports]);

        for (const node of relevantNodes) {
            const className = Array.from(node.classList).find(cls => cls.startsWith(prefix));
            if (!className) continue;

            const scope = starryNight.flagToScope(className.slice(prefix.length));
            if (!scope) continue;

            const tree = starryNight.highlight(node.textContent, scope);
            node.replaceChildren(toDom(tree, {fragment: true}));
        }
    }
</script>
</html>

@code{
    readonly string _baseHref = Environment.GetEnvironmentVariable("BaseHref") ?? "/";
}