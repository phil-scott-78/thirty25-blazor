@using BlazorStatic
@inject BlazorStaticOptions Options

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    
    <base href="@_baseHref"/>
    
    @* ReSharper disable once Html.PathError - this is generated dynamically via MapGet *@
    <link type="application/rss+xml" rel="alternate" title="Thirty25" href="rss.xml" />
    <link rel="stylesheet" href="styles.css">

    <meta name="description" content="@Options.BlogDescription">

    <script>
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    </script>
    <HeadOutlet/>
    <PageTitle>@Options.BlogTitle</PageTitle>
</head>

<body class="antialiased font-sans bg-primary-50 dark:bg-neutral-900 transition-colors ">
<div class="dark:bg-primary-950/50 min-h-screen pb-4 md:pb-16">
    <Routes/>
</div>
</body>
<script>
    function swapTheme(){
        if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.theme = 'light';
        } else {
            document.documentElement.classList.add('dark');
            localStorage.theme = 'dark';
        }
    }
</script>
<!-- Import the ESM versions of the required libraries -->
<script type="module">
    import {
        common,
        createStarryNight
    } from 'https://esm.sh/@@wooorm/starry-night@3?bundle'
    import powershell from 'https://esm.sh/@@wooorm/starry-night@3/lang/source.powershell?bundle'

    import {toDom} from 'https://esm.sh/hast-util-to-dom@4?bundle'

    const starryNight = await createStarryNight([...common, powershell])
    const prefix = 'language-'

    const nodes = Array.from(document.body.querySelectorAll('code'))

    for (const node of nodes) {
        const className = Array.from(node.classList).find(function (d) {
            return d.startsWith(prefix)
        })
        if (!className) continue
        const scope = starryNight.flagToScope(className.slice(prefix.length))
        if (!scope) continue
        const tree = starryNight.highlight(node.textContent, scope)
        node.replaceChildren(toDom(tree, {fragment: true}))
    }
</script>
</html>

@code{
    readonly string _baseHref = Environment.GetEnvironmentVariable("BaseHref") ?? "/";
}