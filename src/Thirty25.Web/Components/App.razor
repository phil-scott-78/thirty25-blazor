@using BlazorStatic
@inject BlazorStaticOptions Options

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    
    <base href="@_baseHref"/>
    
    @* ReSharper disable once Html.PathError - this is generated dynamically via MapGet *@
    <link type="application/rss+xml" rel="alternate" title="Thirty25" href="rss.xml" />
    <link rel="stylesheet" href="styles.css?v=@DateTime.Now.Ticks">

    <meta name="description" content="@Options.BlogDescription">

    <script>
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    </script>
    <HeadOutlet/>
    <PageTitle>@Options.BlogTitle</PageTitle>
</head>

<body class="antialiased font-sans bg-base-50 dark:bg-neutral-900 scheme-light dark:scheme-dark  transition-colors ">
<div class="dark:bg-primary-950/50 min-h-screen pb-4 md:pb-16">
    <Routes/>
</div>
</body>
<script>
    function swapTheme(){
        if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.theme = 'light';
        } else {
            document.documentElement.classList.add('dark');
            localStorage.theme = 'dark';
        }
    }
</script>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        // Get all the links in the table of contents
        const tocLinks = document.querySelectorAll('aside ul li a[href^="blog/"]');

        // Map to store section elements and their corresponding TOC links
        const sectionMap = new Map();

        // Initialize all links with aria-selected="false"
        tocLinks.forEach(link => {
            link.setAttribute('aria-selected', 'false');

            // Extract the ID from the href
            const href = link.getAttribute('href');
            const id = href.split('#')[1];

            if (id) {
                const section = document.getElementById(id);
                if (section) {
                    sectionMap.set(section, link);
                }
            }
        });

        // Function to handle intersection changes
        const handleIntersection = (entries) => {
            // Sort entries by their intersection ratio (how much of the element is visible)
            const visibleEntries = entries
                .filter(entry => entry.isIntersecting)
                .sort((a, b) => b.intersectionRatio - a.intersectionRatio);

            if (visibleEntries.length > 0) {
                // Reset all links
                tocLinks.forEach(link => {
                    link.setAttribute('aria-selected', 'false');
                    // Optional: Remove any visual active class
                    link.parentElement.classList.remove('active');
                });

                // Get the most visible section
                const mostVisibleSection = visibleEntries[0].target;
                const correspondingLink = sectionMap.get(mostVisibleSection);

                if (correspondingLink) {
                    // Set aria-selected="true" on the active link
                    correspondingLink.setAttribute('aria-selected', 'true');
                    // Optional: Add a visual active class
                    correspondingLink.parentElement.classList.add('active');
                }
            }
        };

        // Create the Intersection Observer
        const observer = new IntersectionObserver(handleIntersection, {
            // Root margin to slightly adjust when the observation triggers
            rootMargin: '-10% 0px -70% 0px',
            // Threshold array for when the callback should be executed
            threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
        });

        // Observe all sections
        sectionMap.forEach((link, section) => {
            observer.observe(section);
        });
    });

    /**
     * Tab System - Handles all tab elements on a page
     *
     * This script will:
     * 1. Find all tablists on the page
     * 2. Set up event listeners for keyboard navigation and clicking
     * 3. Handle tab switching with proper ARIA attribute updates
     * 4. Manage tab content visibility
     */

    document.addEventListener('DOMContentLoaded', () => {
        // Find all tablists on the page
        const tablists = document.querySelectorAll('[role="tablist"]');

        tablists.forEach(tablist => {
            // Get the ID of the tablist to match with related elements
            const tablistId = tablist.id;
            if (!tablistId) return; // Skip if no ID

            // Find all tabs within this tablist
            const tabs = tablist.querySelectorAll('[role="tab"]');
            if (tabs.length === 0) return; // Skip if no tabs

            // Set up click event listeners for each tab
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    activateTab(tab, tabs);
                });

            });

            // Initialize - make sure at least one tab is active
            const activeTab = tablist.querySelector('[aria-selected="true"]');
            if (!activeTab && tabs.length > 0) {
                activateTab(tabs[0], tabs);
            } else if (activeTab) {
                // Ensure the corresponding tab content is visible
                showTabContent(activeTab);
            }
        });
    });

    /**
     * Activate a tab and deactivate all others in the same tablist
     */
    function activateTab(selectedTab, allTabs) {
        // Deactivate all tabs
        allTabs.forEach(tab => {
            tab.setAttribute('aria-selected', 'false');
            tab.setAttribute('data-state', 'inactive');
            tab.setAttribute('tabindex', '-1');
        });

        // Activate the selected tab
        selectedTab.setAttribute('aria-selected', 'true');
        selectedTab.setAttribute('data-state', 'active');
        selectedTab.setAttribute('tabindex', '0');

        // Show the corresponding tab content
        showTabContent(selectedTab);
    }

    /**
     * Show the tab content associated with the selected tab
     */
    function showTabContent(tab) {
        // Get the ID of the tab content panel from the aria-controls attribute
        const contentId = tab.getAttribute('aria-controls');
        if (!contentId) return;

        // Find the content panel
        const contentPanel = document.getElementById(contentId);
        if (!contentPanel) return;

        // Get the tablist base ID to find all related content panels
        // Example: If tab ID is "tabButtontabs-23-0", we want to find all panels with "tabcontenttabs-23-*"
        const tabId = tab.id;
        const match = tabId.match(/^tabButton(.*)-\d+$/);

        if (match) {
            const baseId = match[1]; // This would be "tabs-23" in our example
            // Find all content panels that belong to this tab group
            const allContentPanels = document.querySelectorAll(`[id^="tabcontent${baseId}-"]`);

            console.log(`Found ${allContentPanels.length} content panels for tab group ${baseId}`);

            // Hide all content panels
            allContentPanels.forEach(panel => {
                panel.setAttribute('aria-selected', 'false');
                console.log(`Setting panel ${panel.id} to inactive`);
            });
        } else {
            console.warn(`Could not parse tab ID format: ${tabId}`);
        }

        // Show the selected content panel
        contentPanel.removeAttribute('hidden');
        contentPanel.setAttribute('aria-selected', 'true');
        console.log(`Setting panel ${contentPanel.id} to active`);
    }
</script>
<script type="module">
    const prefix = 'language-';
    const codeNodes = Array.from(document.body.querySelectorAll('code'));
    const relevantNodes = codeNodes.filter(node =>
        Array.from(node.classList).some(cls => cls.startsWith(prefix))
    );

    if (relevantNodes.length > 0) {
        // Collect unique languages used
        const languages = new Set();
        for (const node of relevantNodes) {
            const langClass = Array.from(node.classList).find(cls => cls.startsWith(prefix));
            if (langClass) {
                languages.add(langClass.slice(prefix.length));
            }
        }

        // Dynamically import starry-night and any needed languages
        const [{common, createStarryNight}, {toDom}] = await Promise.all([
            import('https://esm.sh/@@wooorm/starry-night@3?bundle'),
            import('https://esm.sh/hast-util-to-dom@4?bundle')
        ]);

        // Build list of grammar imports
        const langImports = [];
        for (const lang of languages) {
            // Only load extra languages that are NOT part of `common`
            if (!common.some(gram => gram.names.includes(lang))) {

                try {
                    const mod = await import(`https://esm.sh/@@wooorm/starry-night@3/lang/source.${lang}?bundle`);
                    langImports.push(mod.default);
                } catch (err) {
                    console.warn(`Could not load language grammar for: ${lang}`, err);
                }
            }
        }

        const starryNight = await createStarryNight([...common, ...langImports]);

        for (const node of relevantNodes) {
            const className = Array.from(node.classList).find(cls => cls.startsWith(prefix));
            if (!className) continue;

            const scope = starryNight.flagToScope(className.slice(prefix.length));
            if (!scope) continue;

            const tree = starryNight.highlight(node.textContent, scope);
            node.replaceChildren(toDom(tree, {fragment: true}));
        }
    }
</script>
</html>

@code{
    readonly string _baseHref = Environment.GetEnvironmentVariable("BaseHref") ?? "/";
}