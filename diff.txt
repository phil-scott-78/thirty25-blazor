diff --git a/src/BlazorStatic/BlazorStaticContentOptions.cs b/src/BlazorStatic/BlazorStaticContentOptions.cs
index 741bdb2..da12114 100644
--- a/src/BlazorStatic/BlazorStaticContentOptions.cs
+++ b/src/BlazorStatic/BlazorStaticContentOptions.cs
@@ -4,128 +4,219 @@ using BlazorStatic.Services;
 
 namespace BlazorStatic;
 
+/// <summary>
+/// Defines the contract for Blazor Static content configuration options.
+/// </summary>
 internal interface IBlazorStaticContentOptions
 {
+    /// <summary>
+    /// Gets the path where content files are stored.
+    /// </summary>
     string ContentPath { get; init; }
+    
+    /// <summary>
+    /// Gets the relative path to the media folder from the content path.
+    /// </summary>
     string? MediaFolderRelativeToContentPath { get; init; }
+    
+    /// <summary>
+    /// Gets the request path for media files.
+    /// </summary>
     string? MediaRequestPath { get; }
+    
+    /// <summary>
+    /// Gets the file pattern used to identify post files.
+    /// </summary>
     string PostFilePattern { get; init; }
+    
+    /// <summary>
+    /// Gets the URL path component for the page that displays content.
+    /// </summary>
     string PageUrl { get; init; }
+    
+    /// <summary>
+    /// Gets the configuration options for tags.
+    /// </summary>
     TagsOptions Tags { get; init; }
-    void CheckOptions();
 }
 
 /// <summary>
-/// Options for configuring processing of md files with front matter.
+/// Provides configuration options for processing markdown files with front matter in Blazor Static sites.
 /// </summary>
-/// <typeparam name="TFrontMatter">Any front matter type that inherits from IFrontMatter </typeparam>
+/// <typeparam name="TFrontMatter">The type that represents the front matter data. Must implement IFrontMatter.</typeparam>
+/// <remarks>
+/// <para>
+/// This class defines how markdown content files are processed, where they're located,
+/// and how they're transformed before being rendered by Blazor components.
+/// </para>
+/// <para>
+/// The configuration includes paths for content and media files, processing hooks for
+/// both the markdown and the resulting HTML, and settings for tag-based navigation.
+/// </para>
+/// </remarks>
 public class BlazorStaticContentOptions<TFrontMatter> : IBlazorStaticContentOptions where TFrontMatter : class, IFrontMatter, new()
 {
     /// <summary>
-    /// Folder relative to project root where posts are stored.
-    /// Don't forget to copy the content to bin folder (use CopyToOutputDirectory in .csproj),
-    /// because that's where the app will look for the files.
-    /// Default is Content/Blog where posts are stored.
+    /// Gets or sets the folder path relative to the project root where content files are stored.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This path should be included in your build output. Configure your .csproj file
+    /// to use CopyToOutputDirectory for these files, as the application will look for them
+    /// in the bin folder at runtime.
+    /// </para>
+    /// <para>
+    /// Default value is "Content/Blog".
+    /// </para>
+    /// </remarks>
     public string ContentPath { get; init; } = Path.Combine("Content", "Blog");
 
     /// <summary>
-    /// Folder in ContentPath where media files are stored.
-    /// Important for app.UseStaticFiles targeting the correct folder.
-    /// Null in case of no media folder.
-    /// Default is "media"
+    /// Gets or sets the folder path within ContentPath where media files are stored.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This setting is important for configuring app.UseStaticFiles() to target the correct folder.
+    /// </para>
+    /// <para>
+    /// Set to null if no media folder is used. Default value is "media".
+    /// </para>
+    /// </remarks>
     public string? MediaFolderRelativeToContentPath { get; init; } = Path.Combine( "media" );
 
     /// <summary>
-    /// URL path for media files for posts.
-    /// Used in app.UseStaticFiles to target the correct folder
-    /// and in ParseAndAddPosts to generate correct URLs for images.
-    /// Changes ![alt](media/image.png) to ![alt](Content/Blog/media/image.png).
-    /// Leading slash / is necessary for RequestPath in app.UseStaticFiles,
-    /// and is removed in ParseAndAddPosts. Null in case of no media.
+    /// Gets the URL path for media files associated with posts.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This path is used in two ways:
+    /// </para>
+    /// <list type="bullet">
+    ///     <item>
+    ///         <description>In app.UseStaticFiles() to target the correct folder for serving media.</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>
+    ///             In ParseAndAddPosts to transform relative image paths in markdown.
+    ///             For example, ![alt](media/image.png) becomes ![alt](Content/Blog/media/image.png).
+    ///         </description>
+    ///     </item>
+    /// </list>
+    /// <para>
+    /// A leading slash is necessary for RequestPath in app.UseStaticFiles(),
+    /// and is automatically removed in ParseAndAddPosts. Returns null if MediaFolderRelativeToContentPath is null.
+    /// </para>
+    /// </remarks>
     public string? MediaRequestPath  => MediaFolderRelativeToContentPath is null
         ? null
         : Path.Combine(ContentPath, MediaFolderRelativeToContentPath).Replace(@"\", "/");
 
     /// <summary>
-    /// Pattern for blog post files in ContentPath.
-    /// Default is
+    /// Gets or sets the file pattern used to identify content files in the ContentPath.
     /// </summary>
+    /// <remarks>
+    /// Default value is "*.md" to match all markdown files.
+    /// </remarks>
     public string PostFilePattern { get; init; } = "*.md";
 
     /// <summary>
-    /// Should correspond to page that keeps the list of content.
-    /// For example: @page "/blog" -> PageUrl="blog".
-    /// This also serves as a generated folder name for the content.
-    /// Useful for avoiding magic strings in .razor files.
-    /// Default is "blog".
+    /// Gets or sets the URL path component for the page that displays the content.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This value should correspond to the route specified in your Blazor page.
+    /// For example, if your page is defined with @page "/blog", set PageUrl to "blog".
+    /// </para>
+    /// <para>
+    /// This value also serves as the generated folder name for static content.
+    /// Using this property in code helps avoid magic strings in .razor files.
+    /// </para>
+    /// <para>
+    /// Default value is "blog".
+    /// </para>
+    /// </remarks>
     public string PageUrl { get; init; } = "blog";
 
     /// <summary>
-    /// Action to run after content is parsed and added to the collection.
-    /// Useful for editing data in the posts, such as changing image paths.
-    /// </summary>
-    public Action<BlazorStaticService, BlazorStaticContentService<TFrontMatter>>? AfterContentParsedAndAddedAction { get; set; }
-
-    /// <summary>
-    /// Gets or sets a hook to process the markdown files before they are rendered as HTML.
+    /// Gets or sets a hook to process markdown content before it is rendered as HTML.
     /// </summary>
+    /// <remarks>
+    /// This function takes an IServiceProvider and the raw markdown string,
+    /// and returns the processed markdown string.
+    /// </remarks>
     public Func<IServiceProvider, string, string> PreProcessMarkdown { get; init; } = (provider, s) => s;
 
     /// <summary>
-    /// Gets or sets a hook to process the front matter and html after markdown parsing and before it is passed to Razor.
+    /// Gets or sets a hook to process the front matter and HTML after markdown parsing but before passing to Razor.
     /// </summary>
+    /// <remarks>
+    /// This function takes an IServiceProvider, the parsed front matter, and the HTML content,
+    /// and returns a tuple containing potentially modified versions of both.
+    /// </remarks>
     public Func<IServiceProvider, TFrontMatter, string, (TFrontMatter, string)> PostProcessMarkdown { get; init; } = (provider, frontMatter, html) => (frontMatter, html);
 
     /// <summary>
-    /// Gets a list of excluded mapped routes from static content generation.
+    /// Gets a list of routes to exclude from static content generation.
     /// </summary>
+    /// <remarks>
+    /// Routes specified here will not be included in the generated static output.
+    /// </remarks>
     public ImmutableList<string> ExcludeMapRoutes { get; init; } = [];
 
     /// <summary>
-    /// Validates the configuration properties to ensure required fields are set correctly.
-    /// This validation is run when registering the service.
-    /// </summary>
-    /// <exception cref="InvalidOperationException">
-    /// Thrown if <see cref="ContentPath"/> or <see cref="PageUrl"/> are null or empty.
-    /// </exception>
-    public void CheckOptions()
-    {
-        if (string.IsNullOrWhiteSpace(ContentPath))
-            throw new InvalidOperationException("ContentPath must be set and cannot be null or empty.");
-
-        if (string.IsNullOrWhiteSpace(PageUrl))
-            throw new InvalidOperationException("PageUrl must be set and cannot be null or empty.");
-    }
-
-    /// <summary>
-    /// Options related to tags
+    /// Gets or sets the options related to tag functionality.
     /// </summary>
     public TagsOptions Tags { get; init; } = new();
 }
 
 /// <summary>
-/// Options related to tags
+/// Provides configuration options for tag-based content navigation.
 /// </summary>
+/// <remarks>
+/// Controls how tags are processed, displayed, and linked throughout the site.
+/// </remarks>
 public class TagsOptions
 {
     /// <summary>
-    ///     tag pages will be generated from all tags found in blog posts
+    /// Gets or sets whether tag pages should be automatically generated from tags found in blog posts.
     /// </summary>
-    public bool AddTagPagesFromPosts { get; set; } = true;
+    /// <remarks>
+    /// When true, the system will create dedicated pages for each unique tag found across all posts.
+    /// Default value is true.
+    /// </remarks>
+    public bool AddTagPagesFromPosts { get; init; } = true;
+    
     /// <summary>
-    ///     Should correspond to @page "/tags" (here in relative path: "tags")
-    ///     Useful for avoiding magic strings in .razor files
+    /// Gets or sets the URL path component for the page that displays all tags.
     /// </summary>
-    public string TagsPageUrl { get; set; } = "tags";
+    /// <remarks>
+    /// <para>
+    /// This value should correspond to the route specified in your Blazor page.
+    /// For example, if your tags page is defined with @page "/tags", set TagsPageUrl to "tags".
+    /// </para>
+    /// <para>
+    /// Using this property in code helps avoid magic strings in .razor files.
+    /// </para>
+    /// <para>
+    /// Default value is "tags".
+    /// </para>
+    /// </remarks>
+    public string TagsPageUrl { get; init; } = "tags";
 
     /// <summary>
-    /// Func to convert tag string to file-name/url.
-    /// Also don't forget to use the same encoder while creating tag links
+    /// Gets or sets the function used to encode tag strings into URL-friendly formats.
     /// </summary>
-    public Func<string, string> TagEncodeFunc { get; set; } = s => s.Slugify();
-
-}
+    /// <remarks>
+    /// <para>
+    /// This function transforms a raw tag string into a format suitable for use in URLs and filenames.
+    /// </para>
+    /// <para>
+    /// Important: The same encoding function must be used consistently when creating tag links
+    /// throughout the application to ensure proper navigation.
+    /// </para>
+    /// <para>
+    /// Default implementation uses the Slugify() extension method to create URL-friendly strings.
+    /// </para>
+    /// </remarks>
+    public Func<string, string> TagEncodeFunc { get; init; } = s => s.Slugify();
+}
\ No newline at end of file
diff --git a/src/BlazorStatic/BlazorStaticExtensions.cs b/src/BlazorStatic/BlazorStaticExtensions.cs
index 19b6c67..3065063 100644
--- a/src/BlazorStatic/BlazorStaticExtensions.cs
+++ b/src/BlazorStatic/BlazorStaticExtensions.cs
@@ -23,19 +23,19 @@ public static class BlazorStaticExtensions
     /// <param name="configureOptions">Optional action to customize the content service options. If not provided, default blog settings are used.</param>
     /// <returns>The updated service collection for method chaining.</returns>
     /// <remarks>
-    /// This method registers both concrete and interface implementations of the content service:
-    /// - BlazorStaticContentService&lt;TFrontMatter&gt; as a concrete implementation
-    /// - IContentPostService for general content post access
-    /// - IBlazorStaticContentOptions for configuration access
-    /// 
-    /// The service handles parsing, loading, and providing content with the specified front matter format.
+    /// <para>This method registers both concrete and interface implementations of the content service:</para>
+    /// <list type="bullet">
+    ///     <item><description>BlazorStaticContentService&lt;TFrontMatter&gt; as a concrete implementation</description></item>
+    ///     <item><description>IContentPostService for general content post access</description></item>
+    ///     <item><description>IBlazorStaticContentOptions for configuration access</description></item>
+    /// </list>
+    /// <para>The service handles parsing, loading, and providing content with the specified front matter format.</para>
     /// </remarks>
     public static IServiceCollection AddBlazorStaticContentService<TFrontMatter>(this IServiceCollection services,
         Func<BlazorStaticContentOptions<TFrontMatter>>? configureOptions = null)
         where TFrontMatter : class, IFrontMatter, new()
     {
         var options = configureOptions?.Invoke() ?? new BlazorStaticContentOptions<TFrontMatter>();
-        options.CheckOptions();
 
         services.AddSingleton(options);
         services.AddSingleton<BlazorStaticContentService<TFrontMatter>>();
@@ -54,13 +54,14 @@ public static class BlazorStaticExtensions
     /// <param name="configureOptions">Optional action to customize the static generation process.</param>
     /// <returns>The updated service collection for method chaining.</returns>
     /// <remarks>
-    /// This method registers several essential services for static site generation:
-    /// - BlazorStaticHelpers for utility functions
-    /// - BlazorStaticOptions for configuration
-    /// - BlazorStaticService for the main generation process
-    /// - BlazorStaticFileWatcher for monitoring file changes
-    /// 
-    /// Use this method in conjunction with UseBlazorStaticGenerator to complete the static site generation process.
+    /// <para>This method registers several essential services for static site generation:</para>
+    /// <list type="bullet">
+    ///     <item><description>BlazorStaticHelpers for utility functions</description></item>
+    ///     <item><description>BlazorStaticOptions for configuration</description></item>
+    ///     <item><description>BlazorStaticService for the main generation process</description></item>
+    ///     <item><description>BlazorStaticFileWatcher for monitoring file changes</description></item>
+    /// </list>
+    /// <para>Use this method in conjunction with UseBlazorStaticGenerator to complete the static site generation process.</para>
     /// </remarks>
     public static IServiceCollection AddBlazorStaticService(this IServiceCollection services,
         Func<BlazorStaticOptions> configureOptions)
@@ -81,14 +82,14 @@ public static class BlazorStaticExtensions
     /// </summary>
     /// <param name="app">The web application.</param>
     /// <remarks>
-    /// This method scans all registered IBlazorStaticContentOptions instances and sets up static file serving
-    /// for any configured media paths. For each valid configuration:
-    /// 
-    /// 1. Constructs a web-accessible request path from the MediaRequestPath
-    /// 2. Maps the physical media folder (ContentPath + MediaFolderRelativeToContentPath) to this request path
-    /// 3. Logs a warning if the configured media folder doesn't exist
-    /// 
-    /// This enables serving media files (images, documents, etc.) associated with your static content.
+    /// <para>This method scans all registered IBlazorStaticContentOptions instances and sets up static file serving
+    /// for any configured media paths. For each valid configuration:</para>
+    /// <list type="number">
+    ///     <item><description>Constructs a web-accessible request path from the MediaRequestPath</description></item>
+    ///     <item><description>Maps the physical media folder (ContentPath + MediaFolderRelativeToContentPath) to this request path</description></item>
+    ///     <item><description>Logs a warning if the configured media folder doesn't exist</description></item>
+    /// </list>
+    /// <para>This enables serving media files (images, documents, etc.) associated with your static content.</para>
     /// </remarks>
     public static void MapBlazorStaticAssets(this WebApplication app)
     {
@@ -159,20 +160,51 @@ public static class BlazorStaticExtensions
     /// <param name="app">The web application.</param>
     /// <returns>A Task representing the asynchronous generation operation.</returns>
     /// <remarks>
-    /// This method performs the complete static generation process:
-    /// 
-    /// 1. Loads and parses all content from registered content services
-    /// 2. Copies static web assets (from wwwroot and other static sources) to the output
-    /// 3. Renders and saves all application routes as static HTML
-    /// 
-    /// Call this method after configuring all required BlazorStatic services and during application startup.
-    /// The generation uses the first URL from the application's configured URLs list as the base address.
+    /// <para>This method performs the complete static generation process:</para>
+    /// <list type="number">
+    ///     <item><description>Loads and parses all content from registered content services</description></item>
+    ///     <item><description>Copies static web assets (from wwwroot and other static sources) to the output</description></item>
+    ///     <item><description>Renders and saves all application routes as static HTML</description></item>
+    /// </list>
+    /// <para>Call this method after configuring all required BlazorStatic services and during application startup.
+    /// The generation uses the first URL from the application's configured URLs list as the base address.</para>
     /// </remarks>
     public static async Task UseBlazorStaticGenerator(this WebApplication app)
     {
         var blazorStaticService = app.Services.GetRequiredService<BlazorStaticService>();
         await blazorStaticService.GenerateStaticPages(app.Urls.First());
     }
+
+    /// <summary>
+    /// Conditionally runs the application or generates a static build based on command-line arguments.
+    /// </summary>
+    /// <param name="app">The web application.</param>
+    /// <param name="args">Command-line arguments passed to the application.</param>
+    /// <returns>A Task representing the asynchronous operation.</returns>
+    /// <remarks>
+    /// <para>This method provides a convenient way to toggle between development and build modes:</para>
+    /// <list type="bullet">
+    ///     <item><description>If the first argument is "build" (case-insensitive), the application starts, generates
+    ///     static files using <see cref="UseBlazorStaticGenerator"/>, and then stops</description></item>
+    ///     <item><description>Otherwise, the application runs normally with <see cref="WebApplication.RunAsync" /></description></item>
+    /// </list>
+    /// <para>In both scenarios, <see cref="MapBlazorStaticAssets"/> is called to configure static asset serving.</para>
+    /// </remarks>
+    public static async Task RunOrBuildBlazorStaticSite(this WebApplication app, string[] args)
+    {
+        app.MapBlazorStaticAssets();
+
+        if (args.Length > 0 && args[0].Equals("build", StringComparison.OrdinalIgnoreCase))
+        {
+            await app.StartAsync();
+            await app.UseBlazorStaticGenerator();
+            await app.StopAsync();
+        }
+        else
+        {
+            await app.RunAsync();
+        }
+    }
     
     private static string GetBaseUrl(HttpContext context, BlazorStaticOptions options)
     {
@@ -186,4 +218,4 @@ public static class BlazorStaticExtensions
         var request = context.Request;
         return $"{request.Scheme}://{request.Host}";
     }
-}
+}
\ No newline at end of file
diff --git a/src/BlazorStatic/BlazorStaticOptions.cs b/src/BlazorStatic/BlazorStaticOptions.cs
index e849f61..da2328d 100644
--- a/src/BlazorStatic/BlazorStaticOptions.cs
+++ b/src/BlazorStatic/BlazorStaticOptions.cs
@@ -7,92 +7,218 @@ using YamlDotNet.Serialization.NamingConventions;
 namespace BlazorStatic;
 
 /// <summary>
-///     Configuration options for the BlazorStatic static site generation process.
+/// Configuration options for the BlazorStatic static site generation process.
 /// </summary>
+/// <remarks>
+/// <para>
+/// This class provides comprehensive configuration for controlling how BlazorStatic
+/// generates static websites from Blazor applications, including output paths,
+/// content processing, and generation behavior.
+/// </para>
+/// </remarks>
 public class BlazorStaticOptions
 {
     /// <summary>
-    /// The title of the blog. 
+    /// Gets or sets the title of the blog or website.
     /// </summary>
+    /// <remarks>
+    /// This value is typically used in page headers, metadata, and navigation elements.
+    /// </remarks>
     public required string BlogTitle { get; init; }
 
     /// <summary>
-    /// The leading or description of the blog.
+    /// Gets or sets the description or tagline of the blog or website.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This value is typically used in page metadata, headers, and in SEO-related contexts
+    /// such as social media previews and search engine results.
+    /// </para>
+    /// </remarks>
     public required string BlogDescription { get; init; }
 
     /// <summary>
-    /// Base URL for the published site (e.g., https://example.com)
-    /// Used for generating absolute URLs in sitemap and RSS feed
+    /// Gets or sets the base URL for the published site.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This value is used for generating absolute URLs in various contexts, including:
+    /// </para>
+    /// <list type="bullet">
+    ///     <item><description>Sitemap.xml generation</description></item>
+    ///     <item><description>RSS/Atom feed URLs</description></item>
+    ///     <item><description>Open Graph and other social media metadata</description></item>
+    ///     <item><description>Canonical URL generation</description></item>
+    /// </list>
+    /// <para>
+    /// Example format: "https://example.com" (without a trailing slash)
+    /// </para>
+    /// </remarks>
     public required string BaseUrl { get; init; } 
     
     /// <summary>
-    ///     Specifies the output directory for generated static files.
-    ///     Path is relative to the project root.
+    /// Gets or sets the output directory path for generated static files.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This path is relative to the project root directory. All generated static content
+    /// will be placed in this directory during the build process.
+    /// </para>
+    /// <para>
+    /// Default value is "output".
+    /// </para>
+    /// </remarks>
     public string OutputFolderPath { get; init; } = "output";
 
     /// <summary>
-    ///     Defines the collection of pages that will be generated as static HTML files.
+    /// Gets or sets the collection of pages that will be generated as static HTML files.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This list allows you to explicitly define which routes should be pre-rendered
+    /// as static HTML files during the build process.
+    /// </para>
+    /// <para>
+    /// For pages with route parameters, you can specify the parameter values to use
+    /// when generating the static HTML.
+    /// </para>
+    /// </remarks>
     public ImmutableList<PageToGenerate> PagesToGenerate { get; init; } = [];
 
     /// <summary>
-    ///     When set to true, automatically includes non-parameterized Razor pages in the generation process.
-    ///     
-    ///     Examples:
-    ///     - Non-parameterized: @page "/about"
-    ///     - Parameterized: @page "/docs/{slug}"
+    /// Gets or sets whether to automatically include non-parameterized Razor pages in the generation process.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// When set to true, the system will automatically discover and generate static HTML
+    /// for all Razor pages that do not contain route parameters.
+    /// </para>
+    /// <para>
+    /// Examples of page types:
+    /// </para>
+    /// <list type="bullet">
+    ///     <item>
+    ///         <description>Non-parameterized (will be included): @page "/about"</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Parameterized (will not be included): @page "/docs/{slug}"</description>
+    ///     </item>
+    /// </list>
+    /// <para>
+    /// Default value is true.
+    /// </para>
+    /// </remarks>
     public bool AddPagesWithoutParameters { get; init; } = true;
 
     /// <summary>
-    ///     Specifies the filename to use for index pages.
-    ///     For example, a route "@page "/blog"" will generate "blog/index.html".
+    /// Gets or sets the filename to use for index pages.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This setting controls the output filename for routes that represent directory indices.
+    /// </para>
+    /// <para>
+    /// For example, with the default value of "index.html":
+    /// </para>
+    /// <list type="bullet">
+    ///     <item>
+    ///         <description>A route "@page "/blog"" will generate a file at "blog/index.html"</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>A route "@page "/blog/about"" will generate a file at "blog/about/index.html"</description>
+    ///     </item>
+    /// </list>
+    /// <para>
+    /// Default value is "index.html".
+    /// </para>
+    /// </remarks>
     public string IndexPageHtml { get; init; } = "index.html";
 
     /// <summary>
-    ///     Specifies paths (files or directories) that should be excluded when copying content to the output folder.
-    ///     
-    ///     Paths are relative to the destination location in the output folder, not the source location.
-    ///     
-    ///     Example:
-    ///     To ignore "wwwroot/app.css" when copying "wwwroot" to the root of the output folder,
-    ///     add "app.css" to this list.
+    /// Gets or sets paths that should be excluded when copying content to the output folder.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This list contains file or directory paths that should be skipped during the content copy process.
+    /// Paths are specified relative to the destination location in the output folder, not the source location.
+    /// </para>
+    /// <para>
+    /// Example:
+    /// </para>
+    /// <list type="bullet">
+    ///     <item>
+    ///         <description>
+    ///             To ignore "wwwroot/app.css" when copying "wwwroot" to the root of the output folder,
+    ///             add "app.css" to this list.
+    ///         </description>
+    ///     </item>
+    /// </list>
+    /// </remarks>
     public ImmutableList<string> IgnoredPathsOnContentCopy { get; init; } = [];
 
     /// <summary>
-    ///     Customizes the YAML deserializer used for parsing front matter in markdown files.
-    ///     
-    ///     By default, uses camel case naming convention and ignores unmatched properties.
+    /// Gets or sets the YAML deserializer used for parsing front matter in markdown files.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This deserializer converts YAML front matter sections in markdown files into
+    /// strongly-typed objects for use in templates and rendering.
+    /// </para>
+    /// <para>
+    /// The default configuration:
+    /// </para>
+    /// <list type="bullet">
+    ///     <item><description>Uses camel case naming convention for property mapping</description></item>
+    ///     <item><description>Ignores properties in the YAML that don't have matching class properties</description></item>
+    /// </list>
+    /// <para>
+    /// You can customize this to use different naming conventions or handling strategies.
+    /// </para>
+    /// </remarks>
     public IDeserializer FrontMatterDeserializer { get; init; } = new DeserializerBuilder()
         .WithNamingConvention(CamelCaseNamingConvention.Instance)
         .IgnoreUnmatchedProperties()
         .Build();
 
     /// <summary>
-    ///     Customizes the Markdown processing pipeline used for parsing markdown files.
-    ///     
-    ///     By default, includes advanced extensions and YAML front matter support.
+    /// Gets or sets the Markdown processing pipeline used for parsing markdown files.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// This pipeline defines how markdown content is parsed and transformed into HTML.
+    /// </para>
+    /// <para>
+    /// The default configuration includes:
+    /// </para>
+    /// <list type="bullet">
+    ///     <item><description>Advanced Markdig extensions (tables, footnotes, citations, etc.)</description></item>
+    ///     <item><description>YAML front matter support for metadata extraction</description></item>
+    /// </list>
+    /// <para>
+    /// You can customize this pipeline to add or remove markdown extensions as needed
+    /// for your specific content requirements.
+    /// </para>
+    /// </remarks>
     public MarkdownPipeline MarkdownPipeline { get; init; } = new MarkdownPipelineBuilder()
         .UseAdvancedExtensions()
         .UseYamlFrontMatter()
         .Build();
 
     /// <summary>
-    ///     Controls whether file change detection and hot-reloading are enabled for the Blazor app.
-    ///     When true, the app will automatically refresh when source files are modified.
+    /// Gets or sets whether file change detection and hot-reloading are enabled.
     /// </summary>
+    /// <remarks>
+    /// <para>
+    /// When true, the application will monitor source files for changes and
+    /// automatically refresh the browser when modifications are detected.
+    /// </para>
+    /// <para>
+    /// This setting primarily affects development experience and has no effect
+    /// on the final static output files.
+    /// </para>
+    /// <para>
+    /// Default value is true.
+    /// </para>
+    /// </remarks>
     public bool HotReloadEnabled { get; init; } = true;
-
-    /// <summary>
-    ///     Registers an asynchronous action to be executed before file generation begins.
-    ///     Multiple actions can be added and will be executed in the order they were registered.
-    /// </summary>
-    public ImmutableList<Func<Task>> BeforeFilesGenerationActions { get; init; } = [];
 }
\ No newline at end of file
diff --git a/src/BlazorStatic/Services/BlazorStaticContentService.cs b/src/BlazorStatic/Services/BlazorStaticContentService.cs
index d334e54..060c4d3 100644
--- a/src/BlazorStatic/Services/BlazorStaticContentService.cs
+++ b/src/BlazorStatic/Services/BlazorStaticContentService.cs
@@ -116,7 +116,7 @@ public class BlazorStaticContentService<TFrontMatter> : IBlazorStaticContentServ
 
 
     /// <inheritdoc />
-    public IEnumerable<PageToGenerate> GetPagesToGenerate()
+    IEnumerable<PageToGenerate> IBlazorStaticContentService.GetPagesToGenerate()
     {
         // Post pages - one for each blog post
         foreach (var post in Posts)
@@ -136,7 +136,7 @@ public class BlazorStaticContentService<TFrontMatter> : IBlazorStaticContentServ
     }
 
     /// <inheritdoc />
-    public IEnumerable<ContentToCopy> GetContentToCopy()
+    IEnumerable<ContentToCopy> IBlazorStaticContentService.GetContentToCopy()
     {
         if (Options.MediaFolderRelativeToContentPath == null)
         {
@@ -147,22 +147,6 @@ public class BlazorStaticContentService<TFrontMatter> : IBlazorStaticContentServ
         yield return new ContentToCopy(pathWithMedia, pathWithMedia);
     }
 
-    /// <summary>
-    ///     Parses markdown files and creates Post objects for each valid file found.
-    ///     Extracts front matter, renders HTML content, and processes tags.
-    /// </summary>
-    /// <returns>
-    ///     An immutable list of Post objects representing all non-draft posts.
-    /// </returns>
-    /// <remarks>
-    ///     This method handles several key operations:
-    ///     1. Finds all markdown files in the configured content path
-    ///     2. Parses each file to extract front matter and convert content to HTML
-    ///     3. Skips draft posts based on the IsDraft property of the front matter
-    ///     4. Processes tags if the front matter implements IFrontMatterWithTags
-    ///     5. Builds a collection of Post objects with all required information
-    ///     6. Updates the AllTags dictionary with unique tags
-    /// </remarks>
     private ImmutableList<Post<TFrontMatter>> ParseAndAddPosts()
     {
         var stopwatch = Stopwatch.StartNew();
@@ -171,9 +155,9 @@ public class BlazorStaticContentService<TFrontMatter> : IBlazorStaticContentServ
         var (files, absPostPath) = GetPostsPath();
 
         // Configure media paths if both source and request paths are provided
-        (string, string)? mediaPaths =
+        var mediaPaths =
             Options is { MediaFolderRelativeToContentPath: not null, MediaRequestPath: not null }
-                ? (Options.MediaFolderRelativeToContentPath, Options.MediaRequestPath)
+                ? new MediaPath(Options.MediaFolderRelativeToContentPath, Options.MediaRequestPath)
                 : null;
 
         // Determine if front matter supports tags
diff --git a/src/BlazorStatic/Services/BlazorStaticService.cs b/src/BlazorStatic/Services/BlazorStaticService.cs
index 666dd13..6513c92 100644
--- a/src/BlazorStatic/Services/BlazorStaticService.cs
+++ b/src/BlazorStatic/Services/BlazorStaticService.cs
@@ -16,7 +16,7 @@ namespace BlazorStatic.Services;
 /// <param name="routeHelper">Service for discovering configured ASP.NET routes.</param>
 /// <param name="options">Configuration options for the static generation process</param>
 /// <param name="logger">Logger for diagnostic output</param>
-public class BlazorStaticService(
+internal class BlazorStaticService(
     IWebHostEnvironment environment,
     IEnumerable<IBlazorStaticContentService> contentPostServiceCollection,
     RoutesHelperService routeHelper,
@@ -24,22 +24,41 @@ public class BlazorStaticService(
     ILogger<BlazorStaticService> logger)
 {
     /// <summary>
-    ///     Generates static HTML pages for the Blazor application.
+    /// Generates static HTML pages for the Blazor application.
     /// </summary>
     /// <param name="appUrl">The base URL of the running Blazor application, used for making HTTP requests to fetch page content</param>
     /// <returns>A task representing the asynchronous operation</returns>
     /// <exception cref="InvalidOperationException">Thrown when no pages are available to generate</exception>
     /// <remarks>
-    ///     This method performs several key operations:
-    ///     1. Collects pages to generate from all registered content services
-    ///     2. Optionally adds routes registered via MapGet based on configuration
-    ///     3. Optionally adds non-parametrized Razor pages based on configuration
-    ///     4. Executes any pre-generation actions defined in options
-    ///     5. Clears and recreates the output directory
-    ///     6. Generates a sitemap.xml file if configured
-    ///     7. Copies static content (wwwroot files, etc.) to the output directory
-    ///     8. Renders each page by making HTTP requests to the running application
-    ///     9. Saves each page as a static HTML file in the output directory
+    /// <para>
+    /// This method performs several key operations to generate static HTML files from a running Blazor application.
+    /// </para>
+    /// <list type="number">
+    ///     <item>
+    ///         <description>Collects pages to generate from all registered content services</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Optionally adds routes registered via MapGet based on configuration</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Optionally adds non-parametrized Razor pages based on configuration</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Clears and recreates the output directory</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Generates a sitemap.xml file if configured</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Copies static content (wwwroot files, etc.) to the output directory</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Renders each page by making HTTP requests to the running application</description>
+    ///     </item>
+    ///     <item>
+    ///         <description>Saves each page as a static HTML file in the output directory</description>
+    ///     </item>
+    /// </list>
     /// </remarks>
     internal async Task GenerateStaticPages(string appUrl)
     {
@@ -55,12 +74,6 @@ public class BlazorStaticService(
         {
             pagesToGenerate = pagesToGenerate.AddRange(GetPagesWithoutParameters());
         }
-        
-        // Execute pre-generation actions
-        foreach (var action in options.BeforeFilesGenerationActions)
-        {
-            await action.Invoke();
-        }
 
         // Clear and recreate output directory
         if (Directory.Exists(options.OutputFolderPath))
@@ -126,8 +139,6 @@ public class BlazorStaticService(
         }
     }
 
-    
-
     /// <summary>
     ///     Recursively collects all static web assets (files in wwwroot) that should be copied to the output directory.
     /// </summary>
diff --git a/src/BlazorStatic/Services/IBlazorStaticContentService.cs b/src/BlazorStatic/Services/IBlazorStaticContentService.cs
index 4c06381..a74ccd1 100644
--- a/src/BlazorStatic/Services/IBlazorStaticContentService.cs
+++ b/src/BlazorStatic/Services/IBlazorStaticContentService.cs
@@ -5,7 +5,7 @@ namespace BlazorStatic.Services;
 /// <summary>
 /// The BlazorStaticContentService is responsible for parsing and adding blog posts.
 /// </summary>
-public interface IBlazorStaticContentService
+internal interface IBlazorStaticContentService
 {
     /// <summary>
     ///     Gets the collection of pages that should be generated for this content.
diff --git a/src/BlazorStatic/Services/MarkdownService.cs b/src/BlazorStatic/Services/MarkdownService.cs
index 050e4cf..33dc1e9 100644
--- a/src/BlazorStatic/Services/MarkdownService.cs
+++ b/src/BlazorStatic/Services/MarkdownService.cs
@@ -1,4 +1,8 @@
-﻿using System.Text.RegularExpressions;
+﻿using System.Collections.Concurrent;
+using System.Reflection.Metadata;
+using System.Text.RegularExpressions;
+using BlazorStatic.Models;
+using BlazorStatic.Services;
 using Markdig;
 using Markdig.Extensions.Yaml;
 using Markdig.Syntax;
@@ -8,44 +12,68 @@ using YamlDotNet.Serialization;
 namespace BlazorStatic.Services;
 
 /// <summary>
-/// Service for processing Markdown files, including parsing content, extracting front matter,
-/// and converting Markdown to HTML for use in Blazor Static sites.
+/// Record to represent a media path transformation for images in markdown content
 /// </summary>
-/// <param name="options">Configuration options for BlazorStatic, including Markdown pipeline settings.</param>
-/// <param name="logger">Logger instance for recording warnings and errors during Markdown processing.</param>
-/// <param name="serviceProvider">Service provider for resolving dependencies needed during preprocessing.</param>
-public class MarkdownService(BlazorStaticOptions options, ILogger<MarkdownService> logger, IServiceProvider serviceProvider)
+/// <param name="MediaPathToBeReplaced">The original path prefix to be replaced</param>
+/// <param name="MediaPathNew">The new path prefix to use instead</param>
+public record MediaPath(string MediaPathToBeReplaced, string MediaPathNew);
+
+/// <summary>
+/// Service for parsing and processing Markdown files with YAML front matter.
+/// Provides caching, HTML conversion, and image path transformation capabilities.
+/// </summary>
+public class MarkdownService
 {
+    private readonly ILogger _logger;
+    private readonly IServiceProvider _serviceProvider;
+    private readonly BlazorStaticOptions _options;
+    
+    // Cache to store processed markdown files
+    private static readonly ConcurrentDictionary<string, CachedMarkdownEntry> MarkdownCache = new();
+
     /// <summary>
-    /// Parses a Markdown file and converts it to HTML.
+    /// Clears the markdown cache when metadata is updated.
+    /// Used by the MetadataUpdateHandler to refresh content after changes.
     /// </summary>
-    /// <param name="filePath">Path to the Markdown file to be processed.</param>
-    /// <param name="mediaPaths">
-    /// Optional tuple containing paths for image reference translation:
-    /// - Item1: Original media path prefix to be replaced (e.g., "media")
-    /// - Item2: New media path prefix (e.g., "path/configured/by/useStaticFiles")
-    /// This enables proper resolution of image references when content is served from a different location.
-    /// </param>
-    /// <returns>HTML content generated from the Markdown file.</returns>
-    public async Task<string> ParseMarkdownFile(string filePath,
-        (string mediaPathToBeReplaced, string mediaPathNew)? mediaPaths = null)
+    private static void ClearCache()
     {
-        var markdownContent = await File.ReadAllTextAsync(filePath);
-        var htmlContent = Markdown.ToHtml(ReplaceImagePathsInMarkdown(markdownContent, mediaPaths),
-            options.MarkdownPipeline);
-        return htmlContent;
+        MarkdownCache.Clear();
+    }
+
+    /// <summary>
+    /// Private class to store cached markdown parsing results
+    /// </summary>
+    private record CachedMarkdownEntry(
+        DateTime LastModified,
+        IFrontMatter FrontMatter,
+        string HtmlContent,
+        MediaPath? MediaPath);
+
+    /// <summary>
+    /// Initializes a new instance of the <see cref="MarkdownService"/> class.
+    /// </summary>
+    /// <param name="logger">Logger for recording operational information</param>
+    /// <param name="serviceProvider">Service provider for dependency resolution</param>
+    /// <param name="options">Options for configuring the markdown processing behavior</param>
+    public MarkdownService(ILogger<MarkdownService> logger, IServiceProvider serviceProvider, BlazorStaticOptions options)
+    {
+        _logger = logger;
+        _serviceProvider = serviceProvider;
+        _options = options;
+        
+        HotReloadManager.Subscribe(ClearCache);
     }
 
     /// <summary>
     /// Parses a Markdown file, extracts the YAML front matter into a strongly-typed object,
-    /// and converts the remaining content to HTML.
+    /// and converts the remaining content to HTML. Uses caching for improved performance.
     /// </summary>
     /// <typeparam name="T">Type to deserialize the YAML front matter into. Must have a parameterless constructor.</typeparam>
     /// <param name="filePath">Path to the Markdown file to be processed.</param>
     /// <param name="mediaPaths">
-    /// Optional tuple for image path translation:
-    /// - Item1: Original media path prefix to be replaced
-    /// - Item2: New media path prefix
+    /// Optional media path transformations for image references:
+    /// - MediaPathToBeReplaced: Original media path prefix to be replaced
+    /// - MediaPathNew: New media path prefix to use instead
     /// </param>
     /// <param name="yamlDeserializer">
     /// Custom YAML deserializer instance. If null, the one from BlazorStaticOptions will be used.
@@ -60,18 +88,51 @@ public class MarkdownService(BlazorStaticOptions options, ILogger<MarkdownServic
     /// - The HTML content generated from the Markdown (without the front matter)
     /// </returns>
     public (T frontMatter, string htmlContent) ParseMarkdownFile<T>(string filePath,
-        (string mediaPathToBeReplaced, string mediaPathNew)? mediaPaths = null,
-        IDeserializer? yamlDeserializer = null, Func<IServiceProvider, string, string>? preProcessFile = null) where T : new()
+        MediaPath? mediaPaths = null,
+        IDeserializer? yamlDeserializer = null, Func<IServiceProvider, string, string>? preProcessFile = null) where T : IFrontMatter, new()
     {
-        yamlDeserializer ??= options.FrontMatterDeserializer;
+        // Check if file exists
+        if (!File.Exists(filePath))
+        {
+            _logger.LogWarning("File not found: {filePath}", filePath);
+            return (new T(), string.Empty);
+        }
+
+        // Get file's last write time
+        var fileLastModified = File.GetLastWriteTime(filePath);
+        
+        // Create a cache key that includes the file path and media paths
+        var cacheKey = $"{filePath}_{mediaPaths?.MediaPathToBeReplaced ?? "null"}_{mediaPaths?.MediaPathNew ?? "null"}";
+        
+        // Check if the file is in the cache and is still valid
+        if (MarkdownCache.TryGetValue(cacheKey, out var cachedEntry))
+        {
+            // If the cached version is newer than or equal to the file's last modified time
+            // and the media paths match, return the cached version
+            if (cachedEntry.LastModified >= fileLastModified && 
+                AreMediaPathsEqual(cachedEntry.MediaPath, mediaPaths))
+            {
+                _logger.LogDebug("Using cached version of {filePath}", filePath);
+                return ((T)cachedEntry.FrontMatter, cachedEntry.HtmlContent);
+            }
+        }
+        
+        // If not in cache or cache is invalid, process the file
+        yamlDeserializer ??= _options.FrontMatterDeserializer;
+        
+        // Read the file content
         var markdownContent = File.ReadAllText(filePath);
+        
+        // Apply pre-processing if a preprocessor function was provided
         if (preProcessFile != null)
         {
-            markdownContent = preProcessFile(serviceProvider, markdownContent);
+            markdownContent = preProcessFile(_serviceProvider, markdownContent);
         }
 
-        var document = Markdown.Parse(markdownContent, options.MarkdownPipeline);
+        // Parse the markdown content
+        var document = Markdown.Parse(markdownContent, _options.MarkdownPipeline);
 
+        // Extract the YAML front matter block, if present
         var yamlBlock = document.Descendants<YamlFrontMatterBlock>().FirstOrDefault();
         T frontMatter;
         if (yamlBlock == null)
@@ -81,35 +142,64 @@ public class MarkdownService(BlazorStaticOptions options, ILogger<MarkdownServic
         }
         else
         {
+            // Extract the YAML content
             var frontMatterYaml = yamlBlock.Lines.ToString();
 
             try
             {
+                // Deserialize the YAML content into the specified type
                 frontMatter = yamlDeserializer.Deserialize<T>(frontMatterYaml);
             }
             catch (Exception e)
             {
+                // Handle deserialization errors by using default values
                 frontMatter = new T();
-                logger.LogWarning(
+                _logger.LogWarning(
                     "Cannot deserialize YAML front matter in {file}. The default one will be used! Error: {exceptionMessage}",
                     filePath, e.Message + e.InnerException?.Message);
             }
         }
 
+        // Extract content without front matter
         var contentWithoutFrontMatter = markdownContent[(yamlBlock == null ? 0 : yamlBlock.Span.End + 1)..];
-        var htmlContent = Markdown.ToHtml(ReplaceImagePathsInMarkdown(contentWithoutFrontMatter, mediaPaths), options.MarkdownPipeline);
+        
+        // Replace image paths if needed and convert to HTML
+        var htmlContent = Markdown.ToHtml(ReplaceImagePathsInMarkdown(contentWithoutFrontMatter, mediaPaths), _options.MarkdownPipeline);
+        
+        // Store the result in the cache
+        MarkdownCache[cacheKey] = new CachedMarkdownEntry(fileLastModified, frontMatter, htmlContent, mediaPaths);
+        
+        _logger.LogDebug("Added/updated cache entry for {filePath}", filePath);
+        
         return (frontMatter, htmlContent);
     }
 
+    /// <summary>
+    /// Compares two media path objects for equality
+    /// </summary>
+    /// <param name="path1">First media path object</param>
+    /// <param name="path2">Second media path object</param>
+    /// <returns>True if both paths are equal or both are null, false otherwise</returns>
+    private static bool AreMediaPathsEqual(MediaPath? path1, MediaPath? path2)
+    {
+        if (path1 == null && path2 == null)
+            return true;
+            
+        if (path1 == null || path2 == null)
+            return false;
+            
+        return path1.Equals(path2);
+    }
+
     /// <summary>
     /// Replaces media paths in Markdown content to ensure proper image resolution when content is served.
     /// Handles both Markdown image syntax ![alt](path) and HTML img tags.
     /// </summary>
     /// <param name="markdownContent">The raw Markdown content to process.</param>
     /// <param name="mediaPaths">
-    /// Optional tuple containing:
-    /// - originalPath: Path prefix to be replaced (e.g., "media")
-    /// - newPath: New path prefix to use instead (e.g., "Content/Blog/media")
+    /// Optional media path transformation containing:
+    /// - MediaPathToBeReplaced: Path prefix to be replaced (e.g., "media")
+    /// - MediaPathNew: New path prefix to use instead (e.g., "Content/Blog/media")
     /// </param>
     /// <returns>Markdown content with updated image references.</returns>
     /// <remarks>
@@ -117,23 +207,28 @@ public class MarkdownService(BlazorStaticOptions options, ILogger<MarkdownServic
     /// (e.g., "media/img.jpg") while ensuring proper resolution when the content
     /// is served from a different location in the site structure.
     /// </remarks>
-    private static string ReplaceImagePathsInMarkdown(string markdownContent, (string originalPath, string newPath)? mediaPaths = null)
+    private static string ReplaceImagePathsInMarkdown(string markdownContent, MediaPath? mediaPaths = null)
     {
+        // If no media path transformation is specified, return the content unchanged
         if (mediaPaths == null)
         {
             return markdownContent;
         }
 
         // Pattern for Markdown image syntax: ![alt text](path)
-        var markdownPattern = $@"!\[(.*?)\]\({mediaPaths.Value.originalPath}\/(.*?)\)";
-        var markdownReplacement = $"![$1]({mediaPaths.Value.newPath}/$2)";
+        var markdownPattern = $"""
+                               !\[(.*?)\]\({mediaPaths.MediaPathToBeReplaced}\/(.*?)\)
+                               """;
+        var markdownReplacement = $"![$1]({mediaPaths.MediaPathNew}/$2)";
 
         // Pattern for HTML img tag: <img src="path" .../>
         var htmlPattern = $"""
-                           <img\s+[^>]*src\s*=\s*"{mediaPaths.Value.originalPath}/(.*?)"
+                           <img\s+[^>]*src\s*=\s*"{mediaPaths.MediaPathToBeReplaced}/(.*?)"
                            """;
 
-        var htmlReplacement = $"<img src=\"{mediaPaths.Value.newPath}/$1\"";
+        var htmlReplacement = $"""
+                               <img src="{mediaPaths.MediaPathNew}/$1"
+                               """;
 
         // First, replace the Markdown-style image paths
         var modifiedMarkdown = Regex.Replace(markdownContent, markdownPattern, markdownReplacement);
diff --git a/src/BlazorStatic/Services/RoutesHelper.cs b/src/BlazorStatic/Services/RoutesHelper.cs
index 8635bec..3364ce4 100644
--- a/src/BlazorStatic/Services/RoutesHelper.cs
+++ b/src/BlazorStatic/Services/RoutesHelper.cs
@@ -15,7 +15,7 @@ namespace BlazorStatic.Services;
 /// This code is adapted from: https://andrewlock.net/finding-all-routable-components-in-a-webassembly-app/
 /// with modifications to support static site generation needs.
 /// </remarks>
-public class RoutesHelperService
+internal class RoutesHelperService
 {
     private readonly EndpointDataSource _endpointDataSource;
 
diff --git a/src/BlazorStatic/Services/SitemapRssService.cs b/src/BlazorStatic/Services/SitemapRssService.cs
index ff3e376..3bcffcc 100644
--- a/src/BlazorStatic/Services/SitemapRssService.cs
+++ b/src/BlazorStatic/Services/SitemapRssService.cs
@@ -10,7 +10,7 @@ namespace BlazorStatic.Services;
 /// <summary>
 /// Service for generating sitemap.xml and RSS feed files for a BlazorStatic website.
 /// </summary>
-public class SitemapRssService
+internal class SitemapRssService
 {
     private readonly BlazorStaticOptions _options;
     private readonly IEnumerable<IBlazorStaticContentService> _contentServices;
diff --git a/src/Thirty25.Web/Program.cs b/src/Thirty25.Web/Program.cs
index a67e041..7a759f6 100644
--- a/src/Thirty25.Web/Program.cs
+++ b/src/Thirty25.Web/Program.cs
@@ -33,18 +33,8 @@ app.MapGet("/styles.css", async (MonorailCssService cssService) => Results.Conte
 app.MapStaticAssets();
 app.UseAntiforgery();
 app.MapRazorComponents<App>();
-app.MapBlazorStaticAssets();
 
-if (args.Length > 0 && args[0].Equals("build", StringComparison.OrdinalIgnoreCase))
-{
-    await app.StartAsync();
-    await app.UseBlazorStaticGenerator();
-    await app.StopAsync();
-}
-else
-{
-    app.Run();
-}
+await app.RunOrBuildBlazorStaticSite(args);
 
 public static class WebsiteKeys
 {
